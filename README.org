* Variational Quantum Eigensolver

This is my submission for the QOSF 2020 mentorship program. I have demonstrated
the variational quantum eigensolver (VQE) algorithm, by using it to find the
lowest eigenvalue of a toy Hamiltonian.

A detailed demonstration is given in [[file:VQE_analysis.org][VQE_analysis.org]]. Github does not properly
render Org files. You can either use an editor that supports Org, like Emacs, or
you can view the HTML export on my [[https://soham.dev/posts/vqe/][blog]]. The second option might be the easiest.
The same results can also be generated by executing =python3 main.py=. I have
only tried this on a GNU/Linux device, cannot guarantee if it will run without
modifications on a Windows/MacOS device.

The implementation of the algorithm is spread across three files in  the =vqe=
folder:
1. =vqe.py=: This file provides a base class to define ansatzes, and two
   two-qubit ansatzes that I have used in the demonstration. It also provides
   functions to compute expectation values of Hermitian operators, using a
   quantum computer, or a quantum simulator.
2. =utils.py=: This file provides a function to decompose Hermitian operators
   into tensor products of Pauli matrices.
3. =optimizers.py=: This file provides an implementation of the SPSA
   optimization algorithm. I plan to add additional optimization algorithms
   which can be used to solve small toy problems like this.

I have used Qiskit to implement the quantum part of the algorithm. To run this
on your device please install the necessary dependencies. You can easily do it
with =pip install -r requirements.txt=, preferably in a Python virtual
environment.
